# Gradient descent does not do a very good job at predicting discrete jumps, but I had to try anyways.
# I am going to delete this soon since it does not seem like a worthwhile idea.
# It looks like the algorithm for predicting the hidden nodes in a graph is a special case of a more general algorithm that I had.
# I will therefore delete this soon because there does not seem to be much novelty in this post.


using Random,Flux,NearestNeighbors;

nn=7;
n=2^nn;
d=10;

list=[];
for i in 1:n
push!(list,[i,i+1]);
end;
list[n][2]=1;

for i in 1:1000
newlist=deepcopy(list);
a=rand(1:n);
b=rand(1:n);
c=rand(1:2);
d=rand(1:2);
rr=newlist[a][c];
ss=newlist[b][d];
newlist[a][c]=ss;
newlist[b][d]=rr;
if length(unique(newlist[a]))==2 && length(unique(newlist[b]))==2
list=newlist;
end;
end;

function rootscore(list)
superlist=deepcopy(list);

for i in 1:(nn-1)
templist=[];
for j in 1:n
push!(templist,unique(vcat(superlist[list[j][1]],superlist[list[j][2]])));
end;
superlist=templist;
end;
return sum(length.(superlist));
end;

function score(x) return norm(x^nn-ones(n,n))^2; end;

stride=1;
while true
if pp<=arr stride=Int(min(65536,2*stride));
else stride=Int(max(1,stride/2));
end;
arr=pp;
pp=rootscore(list);
display([stride,pp]);
x=zeros(n,n);
for i in 1:n
for j in 1:2
x[i,list[i][j]]=1;
end;
end;
grad=gradient(score,x)[1];

lam=[];
mantable=[];
for i in 1:n
push!(mantable,[]);
for j in 1:n
push!(mantable[i],[]);
if i==j continue; end;
for k in 1:2
push!(mantable[i][j],[]);
for l in 1:2
push!(mantable[i][j][k],[]);
aa=list[i][k];
bb=list[j][l];
up=(grad[i,aa]+grad[j,bb]-grad[i,bb]-grad[j,aa]);
mantable[i][j][k][l]=up;
push!(lam,up);
end;
end;
end;
end;
lam=sort(lam);
threshold=lam[max(1,length(lam)-stride)];

pile=[];
for i in 1:n
for j in 1:n
if i==j continue; end;
for k in 1:2
for l in 1:2
if mantable[i][j][k][l]>=threshold && rand(0:1)==0
push!(pile,[i,j,k,l]);
end;
end;
end;
end;
end;

pile=shuffle(pile);
for qq in pile
if rand(0:1)==0 continue; end;
i=qq[1];
j=qq[2];
k=qq[3];
l=qq[4];
newlist=deepcopy(list);
aa=newlist[i][k];
bb=newlist[j][l];
newlist[i][k]=bb;
newlist[j][l]=aa;
qq=rootscore(newlist);
if qq>=pp pp=qq; list=newlist; end;
end;

end;




leftarray=[];
rightarray=[];
for i in 1:n
push!(leftarray,randn(d));
push!(rightarray,randn(d));
end;

# It is possible to form something similar to the fitness function 'score' where the 
score=function(leftarray,rightarray)
prod=0;
suma=zeros(d,d);
for i in 1:n
suma+=leftarray[i]*transpose(leftarray[i])+rightarray[i]*transpose(rightarray[i]);
for a in list[i]
prod+=log(abs(dot(leftarray[i],rightarray[a])));
end;
end;
return exp(prod/ll)/norm(suma);
end;

rate=0.001; old=0; new=0; 

level=0;

ll=sum(length.(list));


function newlistcandidates(leftarray,rightarray,list)
mann=0;
rate=1; 
old=score(leftarray,rightarray);
while true
 amm=norm(leftarray);
 leftarray/=amm;
 rightarray/=amm; 
 rate=rate*1.01;  
 grad=gradient(score,leftarray,rightarray);
 new=score(leftarray+rate*grad[1],rightarray+rate*grad[2]);
if mann>0 mann=0.5*mann+0.5*abs(new-old) else mann=abs(new-old); end;
 if old>new 
 rate=rate/2; 
 else 
 leftarray+=rate*grad[1]; rightarray+=rate*grad[2]; 
 display([new,rate,mann]); 
 end;
 old=new;
 if mann<0.00001 break; end;
end;
leftmatrix=zeros(d,n);
 rightmatrix=zeros(d,n);
  for i in 1:n
  for j in 1:d
  leftmatrix[j,i]=leftarray[i][j];
  rightmatrix[j,i]=rightarray[i][j];
  end;
  end;
 lefttree = KDTree(leftmatrix);
 righttree = KDTree(rightmatrix);
 proslist=[];
 for i in 1:n
 push!(proslist,knn(righttree, leftarray[i], 16, true)[1]);
 end;
 for i in 1:n
 mar=knn(lefttree, rightarray[i], 16, true)[1];
 for a in mar
 push!(proslist[a],i);
 end;
 end;
 for i in 1:n
 proslist[i]=setdiff(proslist[i],list[i]);
 end;
 return [leftarray,rightarray,proslist]; end;


proslist=[];
for i in 1:n
push!(proslist,[rand(1:n)]);
end;

p=rootscore(level,list);
juice=0;
while true
if juice<1
tar=newlistcandidates(leftarray,rightarray,list);
leftarray=tar[1];
rightarray=tar[2];
for i in 1:n
append!(proslist[i],tar[3][i]);
end;
juice+=1;
end;

if p==n*2^(level+1)
level=level+1;
p=rootscore(level,list);
end;
ii=1;
jj=1;
while ii==jj
ii=rand(1:n);
jj=rand(1:n);
end;
list[ii]=shuffle(list[ii]);
aa=list[ii][2];
bb=list[jj][2];
juice=0.9*juice+0.1*length(proslist[ii]);
if level>=1 
if !(bb in proslist[ii] || aa in proslist[jj])
continue;
end;
proslist[ii]=setdiff(proslist[ii],[bb]);
proslist[jj]=setdiff(proslist[jj],[aa]);
end;

newlist=deepcopy(list);
newlist[ii][2]=bb;
newlist[jj][2]=aa;
q=rootscore(level,newlist);
if q>=p
display([level,q]);
p=q;
list=newlist;
end;
end;



