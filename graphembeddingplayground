# Here we give examples of graph embeddings constructed using ideas similar to L_{2,d}-spectral radius dimensionality reduction.
#

#gradient(g,x,y)[1]-adjoint(u)*adjoint(v)*(u*v)*lambda/abs(u*v*lambda)^2*adjoint(y)

list=[];
type=ComplexF64;
#nx=256;
#ny=256;
#n=nx+ny
#d=48;
#e=2;
#power=6;
#list=[];


#for i in 1:nx
#for j in 1:ny
#if (i-1)|(j-1)==i-1
#push!(list,[i,j+nx]);
#end;
#end;
#end;

n=40;
d=40;
e=10;

#tam=xar[1][1];

list=[];
for i in 1:n
for j in 1:(i-1)
if rand(0:1)==1 
push!(list,[i,j]);
end;
end;
end;
ll=length(list);

#for i in 1:512
#for j in 1:512
#if i%j==0
#push!(list,[i,j+512]);
#end;
#end;
#end;

ll=length(list);

#nx and ny are the dimensions of imagemat.
imagemat=zeros(256,256);
for i in 1:256
for j in 1:256
imagemat[i,j]=exp(-((i-128)^2+(j-128)^2)/10000);
end;
end;

#nx=size(imagemat)[1];
#ny=size(imagemat)[2];
n=nx+ny;
#imagemat is a 512 by 512 matrix.



#for i in 1:n
#push!(list,[]);
#end;
#for i in 1:n
#for j in 1:(i-1)
#if rand(0:1)==1
#push!(list[i],j);
#push!(list[j],i);
#end;
#end;
#end;

#ll=sum(length.(list));



function matscore(matrixtable)
prod=0;
suma=zeros(d,d);
for i in 1:n
suma+=matrixtable[i]*adjoint(matrixtable[i]);
for i in 1:ll
prod+=log(norm((matrixtable[list[i][1]]*matrixtable[list[i][2]])^power));
end;
end;
return exp(prod/(ll*2*power))/norm(suma);
end;



function bottommatscore(leftmatrixtable,rightmatrixtable)
suma=zeros(d,d);
for i in 1:n
suma+=leftmatrixtable[i]*(rightmatrixtable[i]*adjoint(rightmatrixtable[i]))*adjoint(leftmatrixtable[i])
end;
return log(norm(suma))/2;
end;

## I also need to define logbottommatscore(matrixtable), but that is for later.
function gradbottommatscore(leftmatrixtable,rightmatrixtable)
suma=zeros(d,d);
for i in 1:n
suma+=leftmatrixtable[i]*(rightmatrixtable[i]*adjoint(rightmatrixtable[i]))*adjoint(leftmatrixtable[i])
end;
nn=norm(suma)^2;
leftgrad=[];
rightgrad=[];
for i in 1:n
push!(leftgrad,suma*(leftmatrixtable[i]*(rightmatrixtable[i]*adjoint(rightmatrixtable[i])))/nn);
push!(rightgrad,(adjoint(leftmatrixtable[i])*suma*leftmatrixtable[i])*rightmatrixtable[i]/nn);
end;
return [leftgrad,rightgrad];
end;



function bottommatscore(matrixtable)
if d==e
prod=0;
suma=zeros(d,d);
for i in 1:n
suma+=matrixtable[i]*adjoint(matrixtable[i]);
end;
return log(norm(suma))/2;
else

prod=0;
suma=zeros(d,d);
sumb=zeros(d,d);
sumc=zeros(e,e);
sumd=zeros(e,e);
for i in 1:nx
suma+=adjoint(matrixtable[i])*matrixtable[i];
end;
for i in nx+1:nx+ny
sumb+=matrixtable[i]*adjoint(matrixtable[i]);
end;
for i in 1:nx
sumc+=matrixtable[i]*adjoint(matrixtable[i]);
end;
for i in nx+1:nx+ny
sumd+=adjoint(matrixtable[i])*matrixtable[i];
end;
return (log(norm(suma)^2+norm(sumb)^2)+log(norm(sumc)^2+norm(sumd)^2))/8;
end;
end;

function slowspecradmatscore(matrix)
prod=0;
for i in 1:ll
prod+=log(rad(matrix[list[i][1]]*matrix[list[i][2]]));
end;
return prod/(2*ll);
end;

function specradmatscore(matrixtable)
prod=0;
for i in 1:ll
prod+=log(abs(dot(righteigenvectors[i],matrixtable[list[i][1]]*matrixtable[list[i][2]]*righteigenvectors[i])));
end;
return prod/(2*ll);
end;

function specradmatscore(leftmatrixtable,rightmatrixtable)
prod=0;
for i in 1:ll
prod+=log(abs(dot(righteigenvectors[i],rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i])));
#prod+=log(abs(dot(righteigenvectors[i],matrixtable[list[i][1]]*matrixtable[list[i][2]]*righteigenvectors[i])));
end;
return prod/(2*ll);
end;

function slowspecradmatscore(leftmatrixtable,rightmatrixtable)
prod=0;
for i in 1:ll
prod+=log(rad(leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*rightmatrixtable[list[i][2]]));
end;
return prod/(2*ll);
end;



compbipspecradmatscore=function(imagemat,matrixtable)
prod=0;
nx=size(imagemat)[1];
ny=size(imagemat)[2];
for i in 1:nx
for j in 1:ny
if imagemat[i,j]==0 continue; end;
prod+=log(abs(dot(righteigenvectors[i][j],matrixtable[i]*matrixtable[nx+j]*righteigenvectors[i][j])))*imagemat[i,j];
end;
end;
return prod/(2*sum(imagemat));
end;


function compbiptotalspecradmatscore(imagemat,matrixtable)
return compbipspecradmatscore(imagemat,matrixtable)-bottommatscore(matrixtable);
end;


function totalspecradmatscore(matrixtable)
return specradmatscore(matrixtable)-bottommatscore(matrixtable);
end;

function totalspecradmatscore(leftmatrixtable,rightmatrixtable)
return specradmatscore(leftmatrixtable,rightmatrixtable)-bottommatscore(leftmatrixtable,rightmatrixtable);
end;


function slowtotalspecradmatscore(matrixtable)
return slowspecradmatscore(matrixtable)-bottommatscore(matrixtable);
end;


function gradspecradmatscore(lefteigenvectors,righteigenvectors,matrixtable)
grad=[];
for i in 1:nx
push!(grad,zeros(type,e,d));
end;
for i in 1:ny
push!(grad,zeros(type,d,e));
end;
for i in 1:ll
lambda=dot(righteigenvectors[i],matrixtable[list[i][1]]*(matrixtable[list[i][2]]*righteigenvectors[i]));
cc=lefteigenvectors[i]*righteigenvectors[i];
grad[list[i][1]]+=adjoint(lefteigenvectors[i])*(adjoint(righteigenvectors[i])*adjoint(matrixtable[list[i][2]]))*(cc*lambda/abs(cc*lambda)^2);
grad[list[i][2]]+=(adjoint(matrixtable[list[i][1]])*adjoint(lefteigenvectors[i]))*adjoint(righteigenvectors[i])*(cc*lambda/abs(cc*lambda)^2);
end;
return grad/(2*ll);
end;

function gradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable,rightmatrixtable)
leftgrad=[];
rightgrad=[];
for i in 1:n
push!(leftgrad,zeros(type,d,e));
push!(rightgrad,zeros(type,e,d));
end;
for i in 1:ll
#lefteigenvectors[i]=lefteigenvectors[i]*rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]];
#righteigenvectors[i]=rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i];

lambda=dot(righteigenvectors[i],rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i]);
c=lefteigenvectors[i]*righteigenvectors[i]*lambda;
cc=c/(abs(c)^2*2*ll);

rightgrad[list[i][2]]+=cc*adjoint(lefteigenvectors[i])*adjoint(leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i]);
leftgrad[list[i][1]]+=cc*adjoint(lefteigenvectors[i]*rightmatrixtable[list[i][2]])*adjoint(rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i]);
rightgrad[list[i][1]]+=cc*adjoint(lefteigenvectors[i]*rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]])*adjoint(leftmatrixtable[list[i][2]]*righteigenvectors[i]);
leftgrad[list[i][2]]+=cc*adjoint(lefteigenvectors[i]*rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]])*adjoint(righteigenvectors[i]);
end;
return [leftgrad,rightgrad];
end;


# Since this function is similar to gradspecradmatscore, I can probably combine these functions to save space.
compbipgradspecradmatscore=function(imagemat,lefteigenvectors,righteigenvectors,matrix)
grad=[];
for i in 1:n
push!(grad,zeros(type,d,d));
end;
for i in 1:nx
for j in 1:ny
if imagemat[i,j]==0 continue; end;
lambda=dot(righteigenvectors[i][j],matrix[i]*matrix[nx+j]*righteigenvectors[i][j]);
cc=lefteigenvectors[i][j]*righteigenvectors[i][j];
grad[i]+=adjoint(lefteigenvectors[i][j])*(adjoint(righteigenvectors[i][j])*adjoint(matrix[nx+j]))*(imagemat[i,j]*cc*lambda/abs(cc*lambda)^2);
grad[nx+j]+=(adjoint(matrix[i])*adjoint(lefteigenvectors[i][j]))*adjoint(righteigenvectors[i][j])*(imagemat[i,j]*cc*lambda/abs(cc*lambda)^2);
end;
end;
return grad/(2*sum(imagemat));
end;

function compbiptotalgradspecradmatscore(imagemat,lefteigenvectors,righteigenvectors,matrix)
return compbipgradspecradmatscore(imagemat,lefteigenvectors,righteigenvectors,matrix)-gradient(bottommatscore,matrix)[1];
end;


function totalgradspecradmatscore(lefteigenvectors,righteigenvectors,matrix)
return gradspecradmatscore(lefteigenvectors,righteigenvectors,matrix)-gradient(bottommatscore,matrix)[1];
end;

function totalgradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable,rightmatrixtable)
ork=gradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable,rightmatrixtable)
urk=gradbottommatscore(leftmatrixtable,rightmatrixtable);
# I am seeing if this works. I can always revert the code back.
#urk=gradient(bottommatscore,leftmatrixtable,rightmatrixtable)
return [ork[1]-urk[1],ork[2]-urk[2]];
#return gradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable)-gradient(bottommatscore,leftmatrixtable,rightmatrixtable)[1];
end;



matrixtable=[];
for i in 1:(nx+ny)
xx=randn(type,d,d)/d^2;
push!(matrixtable,xx+xx^0);
end;

lefteigenvectors=[];
righteigenvectors=[];
for i in 1:nx
push!(lefteigenvectors,[]);
push!(righteigenvectors,[]);
for j in 1:ny
push!(lefteigenvectors[i],adjoint(randn(type,d)));
push!(righteigenvectors[i],randn(type,d));
end;
end;



rate=1;
pp=0;
qq=0;

ham=1;
mash=0;
cle=0;
while true
matrixtable=matrixtable/mean(norm.(matrixtable));

for i in 1:nx
for j in 1:ny
lefteigenvectors[i][j]=lefteigenvectors[i][j]*matrixtable[i]*matrixtable[nx+j];
righteigenvectors[i][j]=matrixtable[i]*matrixtable[nx+j]*righteigenvectors[i][j];
lefteigenvectors[i][j]=lefteigenvectors[i][j]/norm(lefteigenvectors[i][j]);
righteigenvectors[i][j]=righteigenvectors[i][j]/norm(righteigenvectors[i][j]);
end;
end;

##### GO HERE
grad=compbiptotalgradspecradmatscore(imagemat,lefteigenvectors,righteigenvectors,matrixtable)
pp=compbipspecradmatscore(imagemat,matrixtable);
qq=compbipspecradmatscore(imagemat,matrixtable+rate*grad);
if mash>pp ham+=1;
cle=0;
elseif cle>4
ham=max(1,ham-1);
end;
cle+=1;
mash=pp;
if pp>qq rate/=2; 
else
matrixtable+=rate*grad;
end;

display([rate,ham,pp]);
rate*=1.1;
qq=pp;
end;





##################
##################
##################
##################

#matrixtable=[];
#for i in 1:n
#xx=randn(type,d,d)/d^2;
#push!(matrixtable,xx+xx^0);
#end;

matrixtable=[];
for i in 1:nx
xx=randn(type,e,d);
push!(matrixtable,xx);
end;
for i in 1:ny
xx=randn(type,d,e);
push!(matrixtable,xx);
end;



lefteigenvectors=[];
righteigenvectors=[];
for i in 1:ll
push!(lefteigenvectors,adjoint(randn(type,e)));
push!(righteigenvectors,randn(type,e));
end;

rate=1;
pp=0;
qq=0;

ham=1;
mash=0;
cle=0;
while true
matrixtable=matrixtable/mean(norm.(matrixtable));

for kk in 1:ham
for i in 1:ll
lefteigenvectors[i]=lefteigenvectors[i]*matrixtable[list[i][1]]*matrixtable[list[i][2]];
righteigenvectors[i]=matrixtable[list[i][1]]*matrixtable[list[i][2]]*righteigenvectors[i];
lefteigenvectors[i]=lefteigenvectors[i]/norm(lefteigenvectors[i]);
righteigenvectors[i]=righteigenvectors[i]/norm(righteigenvectors[i]);
end;
end;

grad=totalgradspecradmatscore(lefteigenvectors,righteigenvectors,matrixtable)
pp=totalspecradmatscore(matrixtable);
qq=totalspecradmatscore(matrixtable+rate*grad);
if mash>pp ham+=1;
cle=0;
elseif cle>4
ham=max(1,ham-1);
end;
cle+=1;
mash=pp;
if pp>qq rate/=2; 
else
matrixtable+=rate*grad;
end;

display([rate,ham,pp]);
rate*=1.1;
qq=pp;
end;



# The arrayscore function is probably obsolete since we have more advanced functions that do the same thing.

arrayscore=function(leftarray,rightarray)
prod=0;
suma=zeros(d,d);
for i in 1:n
suma+=leftarray[i]*adjoint(leftarray[i])+rightarray[i]*adjoint(rightarray[i]);
for a in list[i]
prod+=log(abs(dot(leftarray[i],rightarray[a])));
end;
end;
return exp(prod/ll)/norm(suma);
end;
qq=0;
rate=.3;


# The algorithm for finding the gradient of the spectral radius requires one to have a good approximation for a single dominant eigenvalue.
# For real matrices, the dominant eigenvalues may be of the form a+bi,a-bi with a,b real. We either need to use complex matrices during training or change the code so
# that it can better compute the gradient of the spectral radius of real matrices. Another problem is that the dominant eigenvectors of a real matrix may be complex
# Since we are using complex matrices for the dominant eigenvectors, we might as well use complex matrices during the training.

while true


for i in 1:ll
lefteigenvectors[i]=lefteigenvectors[i]*matrixtable[list[i][1]]*matrixtable[list[i][2]];
righteigenvectors[i]=matrixtable[list[i][1]]*matrixtable[list[i][2]]*righteigenvectors[i];
lefteigenvectors[i]=lefteigenvectors[i]/norm(lefteigenvectors[i]);
righteigenvectors[i]=righteigenvectors[i]/norm(righteigenvectors[i]);
end;


end;


rate=1;
pp=1;
qq=1;
amm=0;
while true
#  for i in 1:n
#  for j in 1:dr
#  for k in 1:dr
#  matrixtable[i][2*j,2*k-1]=-adjoint(matrixtable[i][2*j-1,2*k]);
#  matrixtable[i][2*j,2*k]=adjoint(matrixtable[i][2*j-1,2*k-1]);
#  end;
#  end;
#  end;

grad=gradient(matscore,matrixtable)[1];
matrixtable=matrixtable+rate*grad;
matrixtable/=mean(norm.(matrixtable));
pp=matscore(matrixtable);
amm=amm*0.99+0.01*(pp-qq);
display([rate,pp,(pp-qq)/amm]);
if qq>pp rate/=2;
end;
rate*=1.01;
qq=pp;
end;


rate=1;
pp=1;
qq=1;
amm=0;
while true
grad=gradient(score,leftarray,rightarray);
leftarray+=rate*grad[1];
rightarray+=rate*grad[2];
amm=norm(leftarray);
leftarray/=amm;
rightarray/=amm;
pp=score(leftarray,rightarray);
amm=amm*0.99+0.01*(pp-qq);
display([rate,pp,(pp-qq)/amm]);
#if qq>pp rate/=2;
#end;
#rate*=1.01;
qq=pp;
end;

####################################
####################################
####################################
####################################
####################################

leftmatrixtable=[];
rightmatrixtable=[];

#xx=randn(type,d,e);
yy=randn(type,e);
for i in 1:n
#xx=randn(type,d,e);
push!(leftmatrixtable,randn(type,d,e));
end;
for i in 1:n
#xx=randn(type,e,d);
push!(rightmatrixtable,adjoint(leftmatrixtable[i]));
end;



lefteigenvectors=[];
righteigenvectors=[];
for i in 1:ll
push!(lefteigenvectors,adjoint(yy));
push!(righteigenvectors,yy);
end;

#rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]



rate=600;
pp=0;
qq=0;

taz=0;
ham=1;
mash=0;
cle=0;
grad=totalgradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable,rightmatrixtable);
while true
leftmatrixtable=leftmatrixtable/mean(norm.(leftmatrixtable));
rightmatrixtable=rightmatrixtable/mean(norm.(rightmatrixtable));

for i in 1:ll
lefteigenvectors[i]=lefteigenvectors[i]*rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]];
righteigenvectors[i]=rightmatrixtable[list[i][2]]*leftmatrixtable[list[i][1]]*rightmatrixtable[list[i][1]]*leftmatrixtable[list[i][2]]*righteigenvectors[i];
lefteigenvectors[i]/=norm(lefteigenvectors[i]);
righteigenvectors[i]/=norm(righteigenvectors[i]);
end;

newgrad=totalgradspecradmatscore(lefteigenvectors,righteigenvectors,leftmatrixtable,rightmatrixtable);
grad[1]=0.9*grad[1]+0.1*newgrad[1];
grad[2]=0.9*grad[2]+0.1*newgrad[2];

pp=totalspecradmatscore(leftmatrixtable,rightmatrixtable);
qq=totalspecradmatscore(leftmatrixtable+rate*grad[1],rightmatrixtable+rate*grad[2]);

##### GO HERE
#grad=compbiptotalgradspecradmatscore(imagemat,lefteigenvectors,righteigenvectors,matrixtable)
#pp=compbipspecradmatscore(imagemat,matrixtable);
#qq=compbipspecradmatscore(imagemat,matrixtable+rate*grad);
if mash>pp ham+=1;
cle=0;
elseif cle>4
ham=max(1,ham-1);
end;
cle+=1;
mash=pp;
if pp>qq && taz>7
rate/=2; 
taz=0;
else
leftmatrixtable+=rate*grad[1];
rightmatrixtable+=rate*grad[2];
end;

display([rate,ham,pp]);
rate*=1.05;
qq=pp;
taz+=1;
end;



