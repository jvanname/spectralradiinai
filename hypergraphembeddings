n=30;
d=10;

ll=20;

list=[];
for i in 1:ll
push!(list,[]);
for j in 1:n
if rand(0:1)==0 push!(list[i],j); end;
end;
end;

vectors=[];
for i in 1:n
push!(vectors,randn(type,d));
end;

function topvecscore(list,vectors)
cc=0;
for i in 1:ll
#dd=zeros(type,d);
dd=vectors[list[i][1]]*0;
for a in list[i]
dd+=vectors[a];
end;
cc+=log(norm(dd));
end;
return cc/ll;
end;

function bottomscore(multiplicity,vectors)
mat=zeros(type,d,d);
for i in 1:n
mat+=multiplicity[i]*vectors[i]*adjoint(vectors[i]);
end;
return log(norm(mat))/2;
end;

function gradtopvecscore(list,vectors)
grad=[];
for i in 1:n
#push!(grad,zeros(type,d));
push!(grad,vectors[i]*0);
end;
for i in 1:ll
dd=vectors[list[i][1]]*0;
for a in list[i]
dd+=vectors[a];
end;
for a in list[i]
grad[a]+=dd/norm(dd)^2;
end;
end;
return grad/ll;
end;

vecscore=function(multiplicity,list,vectors)
return topvecscore(list,vectors)-bottomscore(multiplicity,vectors);
end;

function gradbottomscore(multiplicity,vectors)
grad=[];
for i in 1:n
#push!(grad,zeros(type,d));
push!(grad,vectors[i]*0);
end;
cc=zeros(type,d,d);
for i in 1:n
cc+=multiplicity[i]*vectors[i]*adjoint(vectors[i]);
end;
mash=[];
for i in 1:n
push!(mash,cc*multiplicity[i]*vectors[i]);
end;
return mash/norm(cc)^2;
end;

function gradvecscore(multiplicity,list,vectors)
return gradtopvecscore(list,vectors)-gradbottomscore(multiplicity,vectors);
end;

function topspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)
cc=0;
for i in 1:ll
dd=zeros(type,d);
for a in list[i]
dd+=matrixtable[a]*righteigenvectors[i];
end;
cc+=log(norm(dd));
end;
return cc/ll;
end;

function slowtopspecmatscore(list,matrixtable)
cc=0;
for i in 1:ll
dd=zeros(type,d,d);
for a in list[i]
dd+=matrixtable[a];
end;
cc+=log(rad(dd));
end;
return cc/ll;
end;

function gradtopspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)
grad=[];
for i in 1:n
push!(grad,zeros(type,d,d));
end;

for i in 1:ll
lambda=0;
neweig=righteigenvectors[i]*0;
for a in list[i]
neweig+=matrixtable[a]*righteigenvectors[i];
end;
lambda=dot(righteigenvectors[i],neweig);
c=lefteigenvectors[i]*righteigenvectors[i]*lambda;
cc=c/(abs(c)^2*ll);
ape=cc*adjoint(lefteigenvectors[i])*adjoint(righteigenvectors[i]);

for a in list[i]
grad[a]+=ape;
end;
end;
return grad;
end;

function specmatscore(multiplicity,list,lefteigenvectors,righteigenvectors,matrixtable)
return topspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)-bottomscore(multiplicity,matrixtable);
end;

function gradspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)
return gradtopspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)-gradbottomscore(multiplicity,matrixtable)
end;



##############################################
##############################################
##############################################

type=Float64;

vectors=[];

ll=length(list);
n=maximum(maximum.(list));


multiplicity=zeros(n);
for i in 1:ll
ccq=1/length(list[i]);
for a in list[i]
multiplicity[a]+=1/ccq;
end;
end;

for i in 1:n
push!(vectors,randn(type,d));
end;
grad=vectors*0;
pp=1;
qq=1;
while true
rate=rate*1.05;
#grad=0.95*grad+0.05*gradvecscore(multiplicity,list,vectors);
newgrad=gradvecscore(multiplicity,list,vectors);
for i in 1:length(grad)
grad[i]=0.95*grad[i]+0.05*newgrad[i];
end;
vectors/=mean(norm.(vectors));
vectors+=rate*grad;
pp=vecscore(multiplicity,list,vectors);
display([pp,rate]);
if qq>pp rate*=0.5; end;
qq=pp;
end;

######################################
######################################
######################################

matrixtable=[];
for i in 1:n
push!(matrixtable,randn(type,d,d));
end;

lefteigenvectors=[];
righteigenvectors=[];
for i in 1:ll
push!(lefteigenvectors,adjoint(randn(type,d)));
push!(righteigenvectors,randn(type,d));
end;

grad=matrixtable*0;
pp=1;
qq=1;
while true
for i in 1:ll
newlefteig=lefteigenvectors[i]*0;
newrighteig=righteigenvectors[i]*0;
for a in list[i]
newrighteig+=matrixtable[a]*righteigenvectors[i]
newlefteig+=lefteigenvectors[i]*matrixtable[a];
end;
lefteigenvectors[i]=newlefteig/norm(newlefteig);
righteigenvectors[i]=newrighteig/norm(newrighteig);
end;
#rate=rate*1.05;

newgrad=gradspecmatscore(list,lefteigenvectors,righteigenvectors,matrixtable)
for i in 1:length(grad)
grad[i]=0.95*grad[i]+0.05*newgrad[i];
end;
matrixtable/=mean(norm.(matrixtable));
matrixtable+=rate*grad;
pp=specmatscore(multiplicity,list,lefteigenvectors,righteigenvectors,matrixtable)
display([pp,rate]);
#if qq>pp rate*=0.5; end;
qq=pp;
end;

