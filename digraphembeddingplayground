# Here we give examples of digraph embedding constructed using ideas similar to L_{2,d}-spectral radius dimensionality reduction.

list=[];
type=ComplexF64;
n=50;
d=0;
for i in 1:n
amm=[];
for j in 1:3
push!(amm,rand(1:n));
end;
push!(list,unique(amm));
end;

ll=sum(length.(list));

# It is possible to form something similar to the fitness function 'score' where the 
score=function(leftarray,rightarray)
prod=0;
suma=zeros(d,d);
for i in 1:n
suma+=leftarray[i]*adjoint(leftarray[i])+rightarray[i]*adjoint(rightarray[i]);
for a in list[i]
prod+=log(abs(dot(leftarray[i],rightarray[a])));
end;
end;
return exp(prod/ll)/norm(suma);
end;
qq=0;
rate=.3;

leftarrayzero=[];
rightarrayzero=[];
leftarrayone=[];
rightarrayone=[];
for i in 1:n
push!(leftarrayzero,randn(type,d));
push!(rightarrayzero,randn(type,d));
push!(leftarrayone,randn(type,d));
push!(rightarrayone,randn(type,d));
end;

gradzero=gradient(score,leftarrayzero,rightarrayzero);
gradone=gradient(score,leftarrayone,rightarrayone);
while true
rate=rate*1.001;
amm=norm(leftarrayzero);
leftarrayzero/=amm;
rightarrayzero/=amm;
amm=norm(leftarrayone);
leftarrayone/=amm;
rightarrayone/=amm;
gradzero=gradient(score,leftarrayzero,rightarrayzero);
gradone=gradient(score,leftarrayone,rightarrayone);
leftarrayzero+=rate*gradzero[1];
rightarrayzero+=rate*gradzero[2];
leftarrayone+=rate*gradone[1];
rightarrayone+=rate*gradone[2];
pp=score(leftarrayzero,rightarrayzero);
ppone=score(leftarrayone,rightarrayone);
display([pp,ppone,rate]);
if qq>pp rate=rate/2; end;
qq=pp;
end;
